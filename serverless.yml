service: serverless-appsync-marketplace
frameworkVersion: '2'

provider:
  name: aws
  region: eu-west-1
  runtime: nodejs12.x
  environment:
    STAGE: ${self:custom.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"

plugins:
  - serverless-appsync-plugin
  - serverless-iam-roles-per-function
  - serverless-export-env

package:
  exclude:
    - package-lock.json
    - package.json

custom:
  region: ${opt:region, self:provider.region}
  stage: ${opt:stage, self:provider.stage}
  # attach appsync file
  appSync:
    - ${file(serverless.appsync-api.yml)}

# LAMBDA FUNCTIONS
functions:
  confirmUserSignup:
    handler: functions/confirm-user-signup.handler
    environment:
      USERS_TABLE: !Ref UsersTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !GetAtt UsersTable.Arn

  uploadProduct:
    handler: functions/upload-product.handler
    environment:
      PRODUCTS_TABLE: !Ref ProductsTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !GetAtt ProductsTable.Arn
  
  addReview:
    handler: functions/add-review.handler
    environment:
      PRODUCTS_TABLE: !Ref ProductsTable
      REVIEWS_TABLE: !Ref ReviewsTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !GetAtt ReviewsTable.Arn
      - Effect: Allow
        Action: dynamodb:UpdateItem
        Resource: !GetAtt ProductsTable.Arn
      - Effect: Allow
        Action: dynamodb:GetItem
        Resource: !GetAtt ProductsTable.Arn

resources:
 Resources:

  # DYNAMODB_TABLES
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      Tags:
        - Key: Environment
          Value: ${self:custom.stage}
        - Key: Name
          Value: users-table

  CategoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: active
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: byActive
          KeySchema:
            - AttributeName: active
              KeyType: HASH
          Projection:
              ProjectionType: ALL
      Tags:
        - Key: Environment
          Value: ${self:custom.stage}
        - Key: Name
          Value: category-table 

  ProductsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      Tags:
        - Key: Environment
          Value: ${self:custom.stage}
        - Key: Name
          Value: products-table
  
  ReviewsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      Tags:
        - Key: Environment
          Value: ${self:custom.stage}
        - Key: Name
          Value: reviews-table
  
  BasketTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: byUser
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
              ProjectionType: ALL
      Tags:
        - Key: Environment
          Value: ${self:custom.stage}
        - Key: Name
          Value: basket-table

  # COGNITO CONFIGURE
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      UsernameAttributes:
        - email
      # add "name" attribue in cognito
      Schema:
        - AttributeDataType: String
          Name: name
          Required: false
          Mutable: true
      LambdaConfig:
        PostConfirmation: !GetAtt ConfirmUserSignupLambdaFunction.Arn

  # PostConfirmation lambda permission
  UserPoolInvokeConfirmUserSignupLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Ref ConfirmUserSignupLambdaFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt CognitoUserPool.Arn      
  
  # this allow user to login on fronend
  WebUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: web
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED

 Outputs:
  AwsRegion:
    Value: ${self:custom.region}

  CognitoUserPoolId:
    Value: !Ref CognitoUserPool

  WebCognitoPoolClientId:
    Value: !Ref WebUserPoolClient